Aqui, estruturei a primeira tabela na refined, com base nessa etapa do Desafio: 
*Business Context 1
To solve this case you need to be familiar with the concept of "Account Monthly
Balance". Account Monthly Balance is the amount of money a customer had in
their account at the end of a given month. This information can be calculated by
adding all the transfers in and subtracting all the transfers out from the previous
Figure 2. A slice of the table structure from the DW Environment (diagram/table_diagram.png).
You can check the code used to generate these diagrams using dbdiagram.io on file
(diagram/table_diagram.txt).
Analista de dados Jr. 4
account balance. Remember you should also consider transfers made by PIX, the
newest Brazilian transfer method. You can see an example below:*

Criei uma QUERY que trouxesse o saldo acumulado mês a mês, a regra de negócio aplicada foi:
*pix_movimentos: agrega pix recebidos e enviados por mês.

*transferencias: agrega transferências de entrada e saída.

*movimentacoes_mensais: une as duas fontes.

*saldos_com_acumulado: calcula o saldo líquido do mês.

*saldos_final: acumula o saldo mês a mês com SUM(...) OVER (...).

Também tratei as colunas: transfer_in, transfer_out, pix_in, pix_out, saldo_mes, saldo_acumulado para uma visão com ROUND(valor, 2) trazendo dois números após o .
Eu precisei tratar a coluna mes_ano, com DATE_FROM_PARTS(ano, mes, 1) pra montar uma data certinha, e depois aplicar FORMAT_DATE('%Y-%m', ...) pois estava aparecendo uma data sem sentido

Com isso, deixei a tabela gerada conforme o desafio e posso também conecta-la ao Data Studio (Looker Studio)

Segue o link da tabela: https://drive.google.com/file/d/1LJaknibueV7oAa3Il_2OIa4DBlLXf8c_/view?usp=sharing

________________________________________________________________________________________________________________

CREATE OR REPLACE TABLE `teste-lcgbr-leticia.refined_teste_lcgbr_leticia.account_monthly_balance` AS

WITH pix_movimentos AS (
  SELECT
    account_id,
    EXTRACT(YEAR FROM pix_completed_at) AS ano,
    EXTRACT(MONTH FROM pix_completed_at) AS mes,
    SUM(CASE WHEN in_or_out = 'pix_in' THEN pix_amount ELSE 0 END) AS pix_recebido,
    SUM(CASE WHEN in_or_out = 'pix_out' THEN pix_amount ELSE 0 END) AS pix_enviado
  FROM `teste-lcgbr-leticia.trusted_testelcgbrleticia.trusted_pix_movements`
  WHERE status = 'completed'
  GROUP BY account_id, ano, mes
),

transferencias AS (
  SELECT
    account_id,
    EXTRACT(YEAR FROM transaction_completed_at) AS ano,
    EXTRACT(MONTH FROM transaction_completed_at) AS mes,
    SUM(amount) AS valor,
    'in' AS tipo
  FROM `teste-lcgbr-leticia.trusted_testelcgbrleticia.trusted_transfer_ins`
  WHERE status = 'completed'
  GROUP BY account_id, ano, mes

  UNION ALL

  SELECT
    account_id,
    EXTRACT(YEAR FROM transaction_completed_at) AS ano,
    EXTRACT(MONTH FROM transaction_completed_at) AS mes,
    SUM(amount) AS valor,
    'out' AS tipo
  FROM `teste-lcgbr-leticia.trusted_testelcgbrleticia.trusted_transfer_outs`
  WHERE status = 'completed'
  GROUP BY account_id, ano, mes
),

movimentacoes_mensais AS (
  SELECT
    t.account_id,
    t.ano,
    t.mes,
    SUM(CASE WHEN t.tipo = 'in' THEN t.valor ELSE 0 END) AS transfer_in,
    SUM(CASE WHEN t.tipo = 'out' THEN t.valor ELSE 0 END) AS transfer_out,
    IFNULL(p.pix_recebido, 0) AS pix_in,
    IFNULL(p.pix_enviado, 0) AS pix_out
  FROM transferencias t
  LEFT JOIN pix_movimentos p
    ON t.account_id = p.account_id AND t.ano = p.ano AND t.mes = p.mes
  GROUP BY t.account_id, t.ano, t.mes, p.pix_recebido, p.pix_enviado
),

saldos_com_acumulado AS (
  SELECT
    account_id,
    ano,
    mes,
    transfer_in,
    transfer_out,
    pix_in,
    pix_out,
    (transfer_in + pix_in) - (transfer_out + pix_out) AS saldo_mes
  FROM movimentacoes_mensais
),

saldos_final AS (
  SELECT
    account_id,
    FORMAT_DATE('%Y-%m', DATE(ano, mes, 1)) AS mes_ano,
    ROUND(transfer_in, 2) AS transfer_in,
    ROUND(transfer_out, 2) AS transfer_out,
    ROUND(pix_in, 2) AS pix_in,
    ROUND(pix_out, 2) AS pix_out,
    ROUND(saldo_mes, 2) AS saldo_mes,
    ROUND(SUM(saldo_mes) OVER (PARTITION BY account_id ORDER BY ano, mes ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 2) AS saldo_acumulado
  FROM saldos_com_acumulado
)

SELECT * FROM saldos_final
ORDER BY account_id, mes_ano;

